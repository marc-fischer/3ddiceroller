{"version":3,"sources":["../../src/components/world.none.js"],"names":["WorldNone","constructor","options","this","onInitComplete","noop","onThemeLoaded","onRollResult","onRollComplete","onDieRemoved","initialized","initScene","config","resize","loadTheme","Promise","resolve","updateConfig","Object","assign","addNonDie","die","console","log","clearTimeout","__privateGet","_rollCompleteTimer","id","value","newDie","rest","_dieCache","_dieRollTimer","push","setTimeout","handleAsleep","__privateWrapper","_count","delay","__privateSet","add","remove","data","dieData","hasOwnProperty","d10Instance","_sleeperCount","rollId","clear","keys","length","forEach","timer","values","mesh","dispose","asleep","Dice","getRollResult","dieParent","_a","_b","d100","sides","d10"],"mappings":"mzBACA,MAAMA,EAUL,WAAAC,CAAYC,GATZ,iBACA,iBACA,sBAAc,GACd,SAAY,CAAE,GACd,SAAS,GACT,SAAgB,GAChB,SAAgB,IAChB,iBACA,cAAO,QAENC,KAAKC,eAAiBF,EAAQE,gBAAkBD,KAAKE,KACrDF,KAAKG,cAAgBJ,EAAQI,eAAiBH,KAAKE,KACnDF,KAAKI,aAAeL,EAAQK,cAAgBJ,KAAKE,KACjDF,KAAKK,eAAiBN,EAAQM,gBAAkBL,KAAKE,KACrDF,KAAKM,aAAeP,EAAQO,cAAgBN,KAAKE,KACjDF,KAAKO,YAAcP,KAAKQ,UAAUT,EAClC,CAED,eAAMS,CAAUC,GAEfT,KAAKS,OAASA,EAAOV,QAGrBC,KAAKC,gBACL,CAED,MAAAS,GAEC,CAED,SAAAC,GACC,OAAOC,QAAQC,SACf,CAED,YAAAC,CAAaf,GACZgB,OAAOC,OAAOhB,KAAKS,OAAQV,EAC3B,CAED,SAAAkB,CAAUC,GACTC,QAAQC,IAAI,MAAOF,GACnBG,aAAaC,OAAKC,IAClB,MAAOC,GAAA,EAAIC,MAAA,GAAkBP,EACvBQ,EAAS,CACdF,GAAA,EACAC,MAAA,EACAhB,OAJoBkB,YAAQT,MAM7B,EAAAlB,KAAK4B,GAAUJ,GAAME,EAErBJ,OAAKO,GAAcC,KAAKC,WAAW,KAClC/B,KAAKgC,aAAaN,IAChBO,OAAKC,GAALD,IAAgBjC,KAAKS,OAAO0B,QAG/BC,OAAKb,EAAqBQ,WAAW,KACpC/B,KAAKK,kBACH,KACH,CAED,GAAAgC,CAAInB,GACHC,QAAQC,IAAI,WACZpB,KAAKiB,UAAUC,EACf,CAED,MAAAoB,CAAOC,GACNpB,QAAQC,IAAI,cAEZ,MAAMoB,EAAUlB,OAAKM,GAAUW,EAAKf,IAGjCgB,EAAQC,eAAe,wBAElBnB,OAAKM,GAAUY,EAAQE,YAAYlB,IAE1CS,OAAKU,GAALV,YAIMX,OAAKM,GAAUW,EAAKf,IAE3BS,OAAKU,GAALV,IAEAjC,KAAKM,aAAaiC,EAAKK,OACvB,CAED,KAAAC,IACK9B,OAAO+B,KAAKxB,OAAKM,IAAWmB,SAAWzB,OAAKqB,KAIhDrB,OAAKO,GAAcmB,QAAQ,GAAO3B,aAAa4B,IAG/ClC,OAAOmC,OAAO5B,OAAKM,IAAWoB,QAAQ,IAClC9B,EAAIiC,MACNjC,EAAIiC,KAAKC,YAIXhB,OAAKR,EAAY,CAAE,GACnBQ,OAAKF,EAAS,GACdE,OAAKO,EAAgB,GACrB,CAGD,kBAAMX,CAAad,G,QAOlB,GALAA,EAAImC,QAAS,QAGPC,IAAKC,cAAcrC,GAEtBA,EAAIwB,aAAexB,EAAIsC,WAGzB,GAAGC,0BAAKf,cAALe,EAAkBJ,QAAUK,0BAAKF,YAALE,EAAgBL,OAAQ,CACtD,MAAMM,EAA4B,MAArBzC,EAAIT,OAAOmD,MAAgB1C,EAAMA,EAAIsC,UAC5CK,EAA2B,KAArB3C,EAAIT,OAAOmD,MAAe1C,EAAMA,EAAIwB,YAC9B,IAAdmB,EAAIpC,OAA8B,IAAfkC,EAAKlC,MAC3BkC,EAAKlC,MAAQ,IAEbkC,EAAKlC,MAAQkC,EAAKlC,MAAQoC,EAAIpC,MAG/BzB,KAAKI,aAAa,CACjBwC,OAAQe,EAAKlD,OAAOmC,OACpBnB,MAAQkC,EAAKlC,OAEd,OAGuB,KAArBP,EAAIT,OAAOmD,OAA8B,IAAd1C,EAAIO,QACjCP,EAAIO,MAAQ,IAEbzB,KAAKI,aAAa,CACjBwC,OAAQ1B,EAAIT,OAAOmC,OACnBnB,MAAOP,EAAIO,QAIb,EAAAzB,KAAK2C,GAAL,GACA,EA5ID,cAEA,cACA,cACA,cACA,cACA,a","file":"static/js/4.347c794d.chunk.js","sourcesContent":["import Dice from './Dice'\nclass WorldNone {\n\tconfig\n\t#canvas\n\tinitialized = false\n\t#dieCache = {}\n\t#count = 0\n\t#sleeperCount = 0\n\t#dieRollTimer = []\n\t#rollCompleteTimer\n\tnoop = () => {}\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete || this.noop\n\t\tthis.onThemeLoaded = options.onThemeLoaded || this.noop\n\t\tthis.onRollResult = options.onRollResult || this.noop\n\t\tthis.onRollComplete = options.onRollComplete || this.noop\n\t\tthis.onDieRemoved = options.onDieRemoved || this.noop\n\t\tthis.initialized = this.initScene(options)\n\t}\n\n\tasync initScene(config) {\n\t\t// set the config from World\n\t\tthis.config = config.options\n\n\t\t// init complete - let the world know\n\t\tthis.onInitComplete()\n\t}\n\n\tresize(){\n\t\t\n\t}\n\n\tloadTheme(){\n\t\treturn Promise.resolve()\n\t}\n\n\tupdateConfig(options){\n\t\tObject.assign(this.config, options)\n\t}\n\n\taddNonDie(die){\n\t\tconsole.log('die', die)\n\t\tclearTimeout(this.#rollCompleteTimer)\n\t\tconst {id, value, ...rest} = die\n\t\tconst newDie = {\n\t\t\tid,\n\t\t\tvalue,\n\t\t\tconfig: rest\n\t\t}\n\t\tthis.#dieCache[id] = newDie\n\t\t\n\t\tthis.#dieRollTimer.push(setTimeout(() => {\n\t\t\tthis.handleAsleep(newDie)\n\t\t}, this.#count++ * this.config.delay))\n\n\t\t// since we don't have a render loop, we'll set an internal timer\n\t\tthis.#rollCompleteTimer = setTimeout(() => {\n\t\t\tthis.onRollComplete()\n\t\t}, 500)\n\t}\n\n\tadd(die){\n\t\tconsole.log(\"add die\")\n\t\tthis.addNonDie(die)\n\t}\n\n\tremove(data){\n\t\tconsole.log(\"remove die\")\n\t\t// TODO: test this with exploding dice\n\t\tconst dieData = this.#dieCache[data.id]\n\t\t\n\t\t// check if this is d100 and remove associated d10 first\n\t\tif(dieData.hasOwnProperty('d10Instance')){\n\t\t\t// delete entry\n\t\t\tdelete this.#dieCache[dieData.d10Instance.id]\n\t\t\t// decrement count\n\t\t\tthis.#sleeperCount--\n\t\t}\n\n\t\t// delete entry\n\t\tdelete this.#dieCache[data.id]\n\t\t// decrement count\n\t\tthis.#sleeperCount--\n\n\t\tthis.onDieRemoved(data.rollId)\n\t}\n\n\tclear(){\n\t\tif(!Object.keys(this.#dieCache).length && !this.#sleeperCount) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.#dieRollTimer.forEach(timer=>clearTimeout(timer))\n\n\t\t// remove all dice\n\t\tObject.values(this.#dieCache).forEach(die => {\n\t\t\tif(die.mesh)\n\t\t\t\tdie.mesh.dispose()\n\t\t})\n\t\t\n\t\t// reset storage\n\t\tthis.#dieCache = {}\n\t\tthis.#count = 0\n\t\tthis.#sleeperCount = 0\n\t}\n\n\t// handle the position updates from the physics worker. It's a simple flat array of numbers for quick and easy transfer\n\tasync handleAsleep(die){\n\t\t// mark this die as asleep\n\t\tdie.asleep = true\n\t\n\t\t// get the roll result for this die\n\t\tawait Dice.getRollResult(die)\n\t\n\t\tif(die.d10Instance || die.dieParent) {\n\t\t\t// if one of the pair is asleep and the other isn't then it falls through without getting the roll result\n\t\t\t// otherwise both dice in the d100 are asleep and ready to calc their roll result\n\t\t\tif(die?.d10Instance?.asleep || die?.dieParent?.asleep) {\n\t\t\t\tconst d100 = die.config.sides === 100 ? die : die.dieParent\n\t\t\t\tconst d10 = die.config.sides === 10 ? die : die.d10Instance\n\t\t\t\tif (d10.value === 0 && d100.value === 0) {\n\t\t\t\t\td100.value = 100; // 00 + 0 is 100 on a d100\n\t\t\t\t} else {\n\t\t\t\t\td100.value = d100.value + d10.value\n\t\t\t\t}\n\t\n\t\t\t\tthis.onRollResult({\n\t\t\t\t\trollId: d100.config.rollId,\n\t\t\t\t\tvalue : d100.value\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\t// turn 0's on a d10 into a 10\n\t\t\tif(die.config.sides === 10 && die.value === 0) {\n\t\t\t\tdie.value = 10\n\t\t\t}\n\t\t\tthis.onRollResult({\n\t\t\t\trollId: die.config.rollId,\n\t\t\t\tvalue: die.value\n\t\t\t})\n\t\t}\n\t\t// add to the sleeper count\n\t\tthis.#sleeperCount++\n\t}\n}\n\nexport default WorldNone"],"sourceRoot":""}