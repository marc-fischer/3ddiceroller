{"version":3,"sources":["components/diceBox.js","components/AdvRollBtn.js","App.js","index.js"],"names":["Dice","DiceBox","id","assetPath","startingHeight","throwForce","spinForce","lightIntensity","AdvRollBtn","props","label","onRoll","notation","_jsx","onClick","roll","children","DiceResults","DisplayResults","App","onRollComplete","results","console","log","showResults","rollDice","group","qty","sides","themeColor","show","className","_jsxs","init","then","document","addEventListener","diceBoxCanvas","getElementById","window","getComputedStyle","display","hide","clear","rootElement","ReactDOM","render","StrictMode"],"mappings":"6OAMA,MAAMA,EAAO,I,KAAIC,GACf,YACA,CACEC,GAAI,cACJC,UAAW,oBACXC,eAAgB,EAChBC,WAAY,EACZC,UAAW,EACXC,eAAgB,K,WCJLC,MAVKC,IAClB,MAAM,MAAEC,EAAK,OAAEC,EAAM,SAAEC,GAAaH,EAMpC,OAAOI,cAAA,UAAQC,QAJFC,KACXJ,EAAOC,IAGoBI,SAAEN,KCGjC,MAAMO,EAAc,IAAIC,IAAe,aAcxB,SAASC,IAEtBnB,EAAKoB,eAAkBC,IACrBC,QAAQC,IAAIF,GAYZJ,EAAYO,YAAYH,IAI1B,MAAMI,EAAWA,CAACb,EAAUc,KAGV,aAAZd,IACFA,EAAW,CAAC,CAACe,IAAK,EAAGC,MAAO,GAAIC,WAAY,WAAY,CAACF,IAAK,EAAGC,MAAO,GAAIC,WAAY,aAE1F7B,EAAKe,KAAKH,GACVZ,EAAK8B,QAGP,OACEjB,cAAA,OAAKkB,UAAU,MAAKf,SAClBgB,eAAA,OAAKD,UAAU,aAAYf,SAAA,CACzBH,cAACL,EAAU,CACTE,MAAM,mBACNE,SAAS,YACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,UACNE,SAAS,MACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,UACNE,SAAS,MACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,WACNE,SAAS,OACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,WACNE,SAAS,OACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,WACNE,SAAS,OACTD,OAAQc,IAEVZ,cAACL,EAAU,CACTE,MAAM,YACNE,SAAS,QACTD,OAAQc,QAKlB,CAjFAzB,EAAKiC,OAAOC,KAAK,KAEfC,SAASC,iBAAiB,YAAa,KACrC,MAAMC,EAAgBF,SAASG,eAAe,eACS,SAAnDC,OAAOC,iBAAiBH,GAAeI,UACzCzC,EAAK0C,OAAOC,QACZ1B,EAAY0B,aCdlB,MAAMC,EAAcT,SAASG,eAAe,QAC5CO,IAASC,OACPjC,cAACkC,aAAU,CAAA/B,SACTH,cAACM,EAAG,MAENyB,E","file":"static/js/main.b24aa868.chunk.js","sourcesContent":["import DiceBox from \"@3d-dice/dice-box\";\n\n/*  --------------- DICE BOX -------------- */\n// Note the dice-box assets in the public folder.\n// Those files are all necessary for the web workers to function properly\n// create new DiceBox class\nconst Dice = new DiceBox(\n  \"#dice-box\", // target DOM element to inject the canvas for rendering\n  {\n    id: \"dice-canvas\", // canvas element id\n    assetPath: \"/assets/dice-box/\",\n    startingHeight: 8,\n    throwForce: 6,\n    spinForce: 5,\n    lightIntensity: 0.9\n  }\n);\n\nexport { Dice };\n","const AdvRollBtn = (props) => {\n  const { label, onRoll, notation } = props;\n\n  const roll = () => {\n    onRoll(notation);\n  };\n\n  return <button onClick={roll}>{label}</button>;\n};\n\nexport default AdvRollBtn;\n","import \"./styles.css\";\nimport DisplayResults from \"@3d-dice/dice-ui/src/displayResults\"; // fui index exports are messed up -> going to src\nimport DiceParser from \"@3d-dice/dice-parser-interface\";\nimport { Dice } from \"./components/diceBox\";\nimport AdvRollBtn from \"./components/AdvRollBtn\";\n\n// create Dice Roll Parser to handle complex notations\n//const DRP = new DiceParser();\n\n// create display overlay for final results\nconst DiceResults = new DisplayResults(\"#dice-box\");\n\n// initialize the Dice Box outside of the component\nDice.init().then(() => {\n  // clear dice on click anywhere on the screen\n  document.addEventListener(\"mousedown\", () => {\n    const diceBoxCanvas = document.getElementById(\"dice-canvas\");\n    if (window.getComputedStyle(diceBoxCanvas).display !== \"none\") {\n      Dice.hide().clear();\n      DiceResults.clear();\n    }\n  });\n});\n\nexport default function App() {\n  // This method is triggered whenever dice are finished rolling\n  Dice.onRollComplete = (results) => {\n    console.log(results);\n\n    // handle any rerolls\n    //const rerolls = Dice.handleRerolls(results);\n    //if (rerolls.length) {\n    //  rerolls.forEach((roll) => Dice.add(roll, roll.groupId));\n    //  return rerolls;\n    //}\n    // if no rerolls needed then parse the final results\n    //const finalResults = Dice.parseFinalResults(results);\n\n    // show the results\n    DiceResults.showResults(results);\n  };\n\n  // trigger dice roll\n  const rollDice = (notation, group) => {\n    // trigger the dice roll using the parser\n    //DRP.rollNotation(notation);\n    if (notation == \"hope&fear\") {\n      notation = [{qty: 1, sides: 12, themeColor: '#FFD700'}, {qty: 1, sides: 12, themeColor: '#372C6E'}]\n    }\n    Dice.roll(notation);\n    Dice.show();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"buttonList\">\n        <AdvRollBtn\n          label=\"Roll Hope & Fear\"\n          notation=\"hope&fear\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d6\"\n          notation=\"1d6\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d8\"\n          notation=\"1d8\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d10\"\n          notation=\"1d10\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d12\"\n          notation=\"1d12\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d20\"\n          notation=\"1d20\"\n          onRoll={rollDice}\n        />\n        <AdvRollBtn\n          label=\"Roll d100\"\n          notation=\"1d100\"\n          onRoll={rollDice}\n        />\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}