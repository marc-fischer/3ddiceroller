{"version":3,"sources":["../../src/components/world.offscreen.js"],"names":["WorldOffScreen","constructor","options","_initScene","this","onInitComplete","__privateSet","_offscreenCanvas","canvas","transferControlToOffscreen","_OffscreenWorker","worldWorker","__privateGet","init","Promise","resolve","reject","offscreenWorkerInit","initialized","__privateMethod","connect","port","postMessage","action","updateConfig","resize","loadTheme","Object","keys","pendingThemePromises","includes","theme","catch","console","error","clear","add","addNonDie","remove","config","width","clientWidth","height","clientHeight","onmessage","e","data","id","onRollResult","die","onRollComplete","onDieRemoved","rollId"],"mappings":"4wn4CAEA,MAAMA,EAWL,WAAAC,CAAYC,GAkBZ,OAAMC,GA5BN,sBAAc,GACd,8BAAsB,GACtB,0BAAkB,GAClB,8BAAuB,CAAE,GACzB,iBACA,iBAEA,sBAAe,QACf,wBAAiB,QAGhBC,KAAKC,eAAiBH,EAAQG,eAG9BC,OAAKC,EAAmBL,EAAQM,OAAOC,8BAGvCH,OAAKI,EAAmB,IAAIC,GAG5BC,OAAKF,GAAiBG,KAAO,IAAIC,QAAQ,CAACC,EAASC,KAClDZ,KAAKa,oBAAsB,IAG5Bb,KAAKc,Y,6CAAcC,MAAKhB,KAALgB,UAAgB,EACnC,CA6CD,OAAAC,CAAQC,GAEP,EAAAjB,KAAKM,GAAiBY,YAAY,CACjCC,OAAS,UACTF,KAAA,GACC,CAAEA,GACJ,CAED,YAAAG,CAAatB,GACZ,EAAAE,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,eAAgBrB,QAAA,GAC3D,CAED,MAAAuB,CAAOvB,GACN,EAAAE,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,SAAUrB,QAAA,GACrD,CAED,eAAMwB,CAAUxB,GAEf,OAAO,IAAIY,QAAQ,CAACC,EAASC,KAC5B,GAAGW,OAAOC,KAAKxB,KAAKyB,sBAAsBC,SAAS5B,EAAQ6B,OAC1D,OAAOhB,IAGRX,KAAKyB,qBAAqB3B,EAAQ6B,OAAShB,EAC3CH,OAAKF,GAAiBY,YAAY,CAACC,OAAQ,YAAarB,QAAA,MACtD8B,MAAM,GAASC,QAAQC,MAAMA,GAChC,CAED,KAAAC,GACC,EAAA/B,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,aAC3C,CAED,GAAAa,CAAIlC,GACH,EAAAE,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,SAAUrB,QAAA,GACrD,CAED,SAAAmC,CAAUnC,GACT,EAAAE,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,YAAarB,QAAA,GACxD,CAED,MAAAoC,CAAOpC,GAEN,EAAAE,KAAKM,GAAiBY,YAAY,CAACC,OAAQ,YAAarB,QAAA,GACxD,EA7GD,cACA,cAuBMC,gBAAU,eAACoC,GAEhB,SAAAnC,KAAKM,GAAiBY,YAAY,CACjCC,OAAQ,OACRf,OAAQI,OAAK,GACb4B,MAAOD,EAAO/B,OAAOiC,YACrBC,OAAQH,EAAO/B,OAAOmC,aACtBzC,QAASqC,EAAOrC,SACd,CAACU,OAAKL,KAGTK,OAAKF,GAAiBkC,UAAaC,IAClC,OAAQA,EAAEC,KAAKvB,QACd,IAAK,gBACJnB,KAAKa,sBACL,MACD,IAAK,mBACJ,MACD,IAAK,eACD4B,EAAEC,KAAKC,IACT3C,KAAKyB,qBAAqBgB,EAAEC,KAAKC,IAAIF,EAAEC,KAAKC,IAE7C,MACD,IAAK,cACJ3C,KAAK4C,aAAaH,EAAEC,KAAKG,KACzB,MACD,IAAK,gBACJ7C,KAAK8C,iBACL,MACD,IAAK,cACJ9C,KAAK+C,aAAaN,EAAEC,KAAKM,gBAKtBxC,OAAKF,GAAiBG,KAE5BT,KAAKC,gBAAe,IAEb,CACP,C","file":"static/js/5.76dcfc5b.chunk.js","sourcesContent":["import worldWorker from './offscreenCanvas.worker?worker&inline' // using vite.js worker import - this will be compiled away\n\nclass WorldOffScreen {\n\tinitialized = false\n\toffscreenWorkerInit = false\n\tthemeLoadedInit = false\n\tpendingThemePromises = {}\n\t#offscreenCanvas\n\t#OffscreenWorker\n\t// onInitComplete = () => {} // init callback\n\tonRollResult = () => {} // individual die callback\n\tonRollComplete = () => {} // roll group callback\n\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete\n\n\t\t// transfer control offscreen\n\t\tthis.#offscreenCanvas = options.canvas.transferControlToOffscreen()\n\n\t\t// initialize 3D World in which BabylonJS runs\n\t\tthis.#OffscreenWorker = new worldWorker()\n\t\t// need to initialize the web worker and get confirmation that initialization is complete before other scripts can run\n\t\t// set a property on the worker to a promise that is resolve when the proper message is returned from the worker\n\t\tthis.#OffscreenWorker.init = new Promise((resolve, reject) => {\n\t\t\tthis.offscreenWorkerInit = resolve\n\t\t})\n\n\t\tthis.initialized = this.#initScene(options)\n\t}\n\n\t// initialize the babylon scene\n\tasync #initScene(config) {\n\t\t// initialize the offscreen worker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction: \"init\",\n\t\t\tcanvas: this.#offscreenCanvas,\n\t\t\twidth: config.canvas.clientWidth,\n\t\t\theight: config.canvas.clientHeight,\n\t\t\toptions: config.options,\n\t\t}, [this.#offscreenCanvas])\n\n\t\t// handle messages from offscreen BabylonJS World\n\t\tthis.#OffscreenWorker.onmessage = (e) => {\n\t\t\tswitch( e.data.action ) {\n\t\t\t\tcase \"init-complete\":\n\t\t\t\t\tthis.offscreenWorkerInit() //fulfill promise so other things can run\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"connect-complete\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"theme-loaded\":\n\t\t\t\t\tif(e.data.id){\n\t\t\t\t\t\tthis.pendingThemePromises[e.data.id](e.data.id)\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-result':\n\t\t\t\t\tthis.onRollResult(e.data.die)\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-complete':\n\t\t\t\t\tthis.onRollComplete()\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'die-removed':\n\t\t\t\t\tthis.onDieRemoved(e.data.rollId)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// await Promise.all([this.#OffscreenWorker.init])\n\t\tawait this.#OffscreenWorker.init\n\n\t\tthis.onInitComplete(true)\n\n\t\treturn true\n\t}\n\n\tconnect(port){\n\t\t// Setup the connection: Port 1 is for this.#OffscreenWorker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction : \"connect\",\n\t\t\tport\n\t\t},[ port ])\n\t}\n\n\tupdateConfig(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"updateConfig\", options});\n\t}\n\n\tresize(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"resize\", options});\n\t}\n\n\tasync loadTheme(options) {\n\t\t// prevent multiple requests of the same theme\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(Object.keys(this.pendingThemePromises).includes(options.theme)) {\n\t\t\t\treturn resolve()\n\t\t\t}\n\n\t\t\tthis.pendingThemePromises[options.theme] = resolve\n\t\t\tthis.#OffscreenWorker.postMessage({action: \"loadTheme\", options})\n\t\t}).catch(error => console.error(error))\n\t}\n\n\tclear(){\n\t\tthis.#OffscreenWorker.postMessage({action: \"clearDice\"})\n\t}\n\n\tadd(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addDie\", options})\n\t}\n\t\n\taddNonDie(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addNonDie\", options})\n\t}\n\n\tremove(options){\n\t\t// remove the die from the render\n\t\tthis.#OffscreenWorker.postMessage({action: \"removeDie\", options})\n\t}\n}\n\nexport default WorldOffScreen"],"sourceRoot":""}